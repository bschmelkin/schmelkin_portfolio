Author: Ben Schmelkin
Date: 10/30/23
Course: Introduction to Artificial Intelligence
Assignment 3

The code in knapsack.py is an implementation of the genetic algorithm that finds the most effective backpack at maximizing imporatnce. The genetic algorithm provided first asks the user which size of population they would like to test on (between 20 and 40) and creates an intial population with that many elements. It then begins to cull and reproduce in the following method. Initially, the list is sorted by best fitness and the least fit half of the population is eliminated. Then, the population is repopulated by children created randomly. For each child, two random parents are chosen and they perform a crossover where one element from the second part and all other elements from the first parent create a child. Then, there is a 10% chance of the child undergoing a mutation where a backpack item from the all_items list is randomly inserted into the child and a random element is removed. After the child is produced, the child is added to the population. A child's fitness value is set to 0 if the weight is over 250 or there are duplicate items within its list of items. This ensures that they will have the best chance of being culled for the next iteration of the loop because they are not part of a valid solution. Once the population is full then the same process is repeated. When the algorithm converges on the same fitness value for 10 iterations, the loop stops and the best backpack is returned. This algorithm can be altered by having a larger (or smaller) population as well as the value that the loop converges on. A more effective algorithm will wait until the best fitness value is the same for hundreds or thousands of times (if it can run fast enough), but for this assignment it runs until it converges for 10 iterations.